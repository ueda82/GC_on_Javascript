OK・画面を作成する
OK・画面はJSを入力できるテキストエリアを持つ
OK・画面はテキストエリアのJSを実行できるボタンを持つ
OK・画面はGCを実行できるボタンを持つ
OK・画面は結果を表示できるボタンを持つ
OK・js/main.jsを作成する
OK・main.jsに実行環境を作成
OK・JS実行ボタンを押すとサンドボックス上で
  inputTextAreaに書かれたプログラムが走るようにする
OK・markAndSweepGc.jsを作成する
OK・heap用の配列を作る。配列の要素はとりあえず100としておく
OK・GCで管理するオブジェクトクラスを作成する
 このオブジェクトを探してGCの対象にするか判断する予定
OK・ルートオブジェクトをsandboxとする
OK・freeListを作成する。
OK・freeListを初期化する関数を作成する。
OK・オブジェクトクラスOをnewした際、chunk関数が動く。
OK・chunk関数はfreeListから空いているheapの要素を取得し
    オブジェクトを格納する
OK・画面はオブジェクトの状態を見ることができる何かを持つ
OK・mark関数を作成する。
OK・mark関数はルートを起点とした再帰関数である
OK・mark関数はルートオブジェクトのすべての要素をチェックし条件に従い再帰する
OK・グローバルオブジェクトに定義された変数はルートオブジェクトに登録されるようにする。
    windowのdiffをとって差分をルートオブジェクトに登録するようにした。
OK・JSコードを実行するときのthisはgc.rootにする。applyで対応ようにする
  ・ (isGcObject,mark,value)のプロパティを持つことvalue がオブジェクトである場合は
    再帰条件を行なう
OK・sweep関数を作成する。
OK・sweep関数はheap領域をチェックしてmark=trueのものはGC対象外とする。
      mark=falseのものはGC対象となるのでvalueをnullにしてかつアドレスを
      フリーリストに追加する
OK・一旦オブジェクトを見るのをテーブルにしたが、最終的にはリストにする予定
OK・CSSを作成する
OK・markフェイズの時にmarkされたCSSは色を変える
OK・sweepフェイズの時にmarkされたCSSは色は戻る
OK・rootの状況が判るテーブルを作成する(rootTable)
OK・rootTableの中にいるGC対象のオブジェクトには色をつける
OK・テキストにサンプルプログラムを表示する

